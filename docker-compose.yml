version: '3.7'

services:

  geth:
      #--ws.origins '*'
      #--gcmode archive
      #--graphql.addr 0.0.0.0
      #--syncmode full
      #--txlookuplimit 1
      #--wsaddr 0.0.0.0
      #--wsapi admin,debug,eth,mining,net,personal,txpool,web3b
      #--wsorigins '*'
    command: |
      geth 
      --cache 4096
      --datadir "${GETH_DATADIR}"
      --datadir.ancient "${GETH_DATADIR_ANCIENT}"
      --ethash.dagdir "${GETH_DAGDIR}"
      --gcmode archive
      --graphql
      --graphql.corsdomain '*'
      --graphql.vhosts '*'
      --http.addr 0.0.0.0
      --http.api admin,debug,eth,mining,net,personal,txpool,web3b
      --http.corsdomain '*'
      --http.vhosts '*'
      --maxpeers 100
      --metrics
      --metrics.expensive
      --nousb
      --pprof
      --pprofaddr 0.0.0.0
      --rpc
      --rpcaddr 0.0.0.0
      --rpcapi admin,debug,eth,mining,net,personal,txpool,web3b
      --rpccorsdomain '*'
      --rpcvhosts '*'
      --syncmode fast
      --txpool.pricelimit 1
      --txpool.accountslots 100
      --txpool.globalslots 200000
      --txpool.accountqueue 200
      --txpool.globalqueue 200000
      --txpool.rejournal 0h30m0s
      --ws
      --ws.addr 0.0.0.0
      --ws.api admin,debug,eth,mining,net,personal,txpool,web3b
      --ws.origins '*'
    image: ethereum/client-go:alltools-v1.9.24
    ports:
      - "8545:8545"    # rpc
      - "8546:8546"    # websocket
      - "6060:6060"    # pprof
      - "30303:30303"  # network
    restart: always
    volumes:
      - ${GETH_DAGDIR}:${GETH_DAGDIR}:rw
      - ${GETH_DATADIR}:${GETH_DATADIR}:rw
      - ${GETH_DATADIR_ANCIENT}:${GETH_DATADIR_ANCIENT}:rw

  cloudflare-argo-rpc:
    build: ./cloudflared
    command: --no-autoupdate
    environment:
      - TUNNEL_HOSTNAME=mainnet-rpc.${CLOUDFLARE_HOSTNAME}
      - TUNNEL_ORIGIN_CERT=/etc/cloudflared/cert.pem
      - TUNNEL_URL=http://geth:8545
    restart: always
    volumes:
      - "${CLOUDFLARE_CERT_PATH}:/etc/cloudflared/cert.pem"

  cloudflare-argo-ws:
    build: ./cloudflared
    command: --no-autoupdate
    environment:
      - TUNNEL_HOSTNAME=mainnet-ws.${CLOUDFLARE_HOSTNAME}
      - TUNNEL_ORIGIN_CERT=/etc/cloudflared/cert.pem
      - TUNNEL_URL=http://geth:8546
    restart: always
    volumes:
      - "${CLOUDFLARE_CERT_PATH}:/etc/cloudflared/cert.pem"

  cloudflare-argo-graphql:
    build: ./cloudflared
    command: --no-autoupdate
    #command: tunnel --no-autoupdate
    #image: cloudflare/cloudflared:2020.11.10
    environment:
      - TUNNEL_HOSTNAME=mainnet-graphql.${CLOUDFLARE_HOSTNAME}
      - TUNNEL_ORIGIN_CERT=/etc/cloudflared/cert.pem
      - TUNNEL_URL=http://geth:8545
    restart: always
    volumes:
      - "${CLOUDFLARE_CERT_PATH}:/etc/cloudflared/cert.pem"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.8.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    restart: always
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data:rw
    ports:
      - 9200:9200

  logstash:
    image: docker.elastic.co/logstash/logstash:7.8.0
    container_name: logstash
    depends_on:
      - elasticsearch
      - kibana
    environment:
      - DISCORD_WEBHOOK
    restart: always
    volumes:
      - $PWD/logstash/pipeline/:/usr/share/logstash/pipeline:ro
      - $PWD/logstash/templates/:/usr/share/logstash/templates:ro
        #- $PWD/logstash/logstash.yml/:/usr/share/logstash/config/logstash.yml:ro
      - logstash-data:/usr/share/logstash/data

  kibana:
    image: docker.elastic.co/kibana/kibana:7.8.0
    container_name: kibana
    depends_on:
      - elasticsearch
    environment:
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY
    ports:
      - 5601:5601
    restart: always

  metricbeat:
    image: docker.elastic.co/beats/metricbeat:7.8.0
    command: |
      --e
      --strict.perms=false
      -system.hostfs=/hostfs
    container_name: metricbeat
    user: root
    #pid: host
    network_mode: host
    restart: always
    depends_on:
      - elasticsearch
      - kibana
    volumes:
      - $PWD/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /proc:/hostfs/proc:ro
      - /:/hostfs:ro

  packetbeat:
    image: docker.elastic.co/beats/packetbeat:7.8.0
    cap_add:
      - NET_ADMIN
      - NET_RAW
    command: |
      --e
      --strict.perms=false
      -E output.elasticsearch.hosts=["localhost:9200"]
    user: packetbeat
    network_mode: host
    restart: always
    depends_on:
      - elasticsearch
      - kibana
    volumes:
      - $PWD/packetbeat.yml:/usr/share/packetbeat/packetbeat.yml:ro

volumes:
  logstash-data:
    driver: local
  geth-data:
    driver: local
  elasticsearch-data:
    driver: local
